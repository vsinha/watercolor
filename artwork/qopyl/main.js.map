{
  "version": 3,
  "sources": ["../../../src/artwork/qopyl/boid.ts", "../../../src/artwork/qopyl/quadtree.ts", "../../../src/artwork/qopyl/main.ts"],
  "sourcesContent": ["import { Vector } from \"p5\";\nimport { IPosition } from \"./quadtree.js\";\n\nconst speed = 0.1;\n\nfunction vectorMean(vecs: Vector[]): Vector {\n  if (vecs.length == 0) {\n    return createVector(0, 0);\n  }\n  const sx = vecs.map((v) => v.x).reduce((a, b) => a + b);\n  const sy = vecs.map((v) => v.y).reduce((a, b) => a + b);\n  return createVector(sx / vecs.length, sy / vecs.length);\n}\n\nfunction limitVec(v: Vector) {\n  if (v.magSq() > 1) {\n    v.setMag(1);\n  }\n  return v;\n}\n\nexport class Boid implements IPosition {\n  pos: Vector;\n  velocity: Vector;\n  radius: number;\n  avoidRadius: number;\n  alignRadius: number;\n  speed: number;\n\n  constructor(x: number, y: number) {\n    this.pos = createVector(x, y);\n    this.radius = 100;\n    this.avoidRadius = 20;\n    this.alignRadius = 50;\n    this.speed = 1;\n    this.velocity = createVector(random(-1, 1), random(-1, 1))\n      .normalize()\n      .mult(100);\n  }\n\n  draw(): void {\n    stroke(\"lightblue\");\n    strokeWeight(4);\n    point(this.pos.x, this.pos.y);\n\n    strokeWeight(2);\n\n    // const dir = Vector.mult(this.velocity, 10);\n    // line(this.pos.x, this.pos.y, this.pos.x + dir.x, this.pos.y + dir.y);\n  }\n\n  private getNeighbors(radius: number, boids: Boid[]) {\n    // CR vsinha: add viewing angle\n    return boids.filter(\n      (boid) => boid != this && this.pos.dist(boid.pos) < radius\n    );\n  }\n\n  private vecTowardsCenter(vecs: Vector[]) {\n    if (vecs.length == 0) {\n      return createVector(0, 0);\n    } else {\n      return limitVec(vectorMean(vecs).sub(this.pos));\n    }\n  }\n\n  update(dt: number, boids: Boid[]): void {\n    const center = this.vecTowardsCenter(\n      this.getNeighbors(this.radius, boids).map((n) => n.pos)\n    );\n\n    const avoid = this.vecTowardsCenter(\n      this.getNeighbors(this.avoidRadius, boids).map((n) => n.pos)\n    ).mult(-1);\n\n    const align = this.vecTowardsCenter(\n      this.getNeighbors(this.alignRadius, boids).map((n) => n.velocity)\n    );\n\n    const love = mouseIsPressed\n      ? limitVec(createVector(mouseX, mouseY).sub(this.pos))\n      : createVector(0, 0);\n\n    const w_center = 3;\n    const w_avoid = 10;\n    const w_align = 1;\n    const w_love = 100;\n    const goal = center\n      .mult(w_center)\n      .add(avoid.mult(w_avoid))\n      .add(align.mult(w_align))\n      .add(love.mult(w_love))\n      .normalize();\n\n    const mu = 0.1;\n    this.velocity\n      .mult(1 - mu)\n      .add(goal.mult(mu))\n      .normalize()\n      .mult(speed)\n      .mult(dt);\n\n    this.pos.add(this.velocity);\n  }\n}\n", "import { Vector } from \"p5\";\n\nexport interface IPosition {\n  pos: Vector;\n}\n\nclass Quad<T extends IPosition> {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n\n  depth: number;\n  parent: Quad<T> | undefined;\n  children: Quad<T>[];\n  points: T[];\n  maxPoints: number;\n\n  constructor(\n    parent: Quad<T> | undefined,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    depth: number\n  ) {\n    this.parent = parent;\n    this.depth = depth;\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    this.children = [];\n    this.points = [];\n    this.maxPoints = 4;\n  }\n\n  createSubQuads() {\n    const w = this.width / 2;\n    const h = this.height / 2;\n    const x = this.x;\n    const y = this.y;\n\n    const d = this.depth + 1;\n    return [\n      new Quad<T>(this, x, y, w, h, d),\n      new Quad<T>(this, x + w, y, w, h, d),\n      new Quad<T>(this, x, y + h, w, h, d),\n      new Quad<T>(this, x + w, y + h, w, h, d),\n    ];\n  }\n\n  contains(point: T) {\n    return (\n      point.pos.x >= this.x &&\n      point.pos.y >= this.y &&\n      point.pos.x < this.x + this.width &&\n      point.pos.y < this.y + this.height\n    );\n  }\n\n  insert(point: T) {\n    if (this.children.length == 0 && this.points.length < this.maxPoints) {\n      this.points.push(point);\n      return;\n    }\n\n    if (this.children.length == 0) {\n      this.children = this.createSubQuads();\n\n      // when we create children we should move any points\n      // in us (the now-parent) to the children\n      this.points.forEach((point) => this.insert(point));\n      this.points = [];\n    }\n\n    this.children.forEach((quad) => {\n      if (quad.contains(point)) {\n        quad.insert(point);\n      }\n    });\n  }\n\n  draw() {\n    if (this.depth > 2 && this.points.length > 0) {\n      stroke(\"gray\");\n      strokeWeight(0.2);\n      noFill();\n\n      beginShape();\n      vertex(this.x, this.y);\n      vertex(this.x + this.width, this.y);\n      vertex(this.x + this.width, this.y + this.height);\n      vertex(this.x, this.y + this.height);\n      endShape(CLOSE);\n\n      // strokeWeight(5);\n      // this.points.forEach((p) => point(p.pos.x, p.pos.y));\n    }\n\n    this.children.forEach((child) => {\n      child.draw();\n    });\n  }\n}\n\nexport class Quadtree<T extends IPosition> {\n  root: Quad<T>;\n\n  insert(point: T): void {\n    if (!this.root.contains(point)) {\n      return;\n    }\n\n    this.root.insert(point);\n  }\n\n  draw(): void {\n    this.root.draw();\n  }\n\n  constructor(\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    points: T[]\n  ) {\n    this.root = new Quad<T>(undefined, x, y, width, height, 0);\n    points.forEach((point) => this.insert(point));\n  }\n}\n", "import { Boid } from \"./boid.js\";\nimport { Quadtree } from \"./quadtree.js\";\n\nlet boids: Boid[] = [];\nlet showQuadtree = false;\n\nexport const setup_ = (\n  width: number,\n  height: number,\n  showQuadtree_: boolean,\n  numBoids: number\n): void => {\n  boids = Array.from(\n    { length: numBoids },\n    () => new Boid(random(0, width), random(0, height))\n  );\n\n  showQuadtree = showQuadtree_;\n};\n\nexport function mouseClicked(): void {\n  console.log(mouseX, mouseY);\n}\n\nexport const setup = (): void => {\n  createCanvas(windowWidth, windowHeight);\n  setup_(windowWidth, windowHeight, true, 200);\n};\n\nexport const draw_ = (dt: number): void => {\n  background(\"rgba(0, 0, 0, 1)\");\n\n  boids.forEach((boid) => boid.update(dt, boids));\n\n  // torus\n  boids.forEach((b) => {\n    if (b.pos.x < 0) {\n      b.pos.x = width;\n    } else if (b.pos.x >= width) {\n      b.pos.x = 0;\n    }\n    if (b.pos.y < 0) {\n      b.pos.y = height;\n    } else if (b.pos.y >= height) {\n      b.pos.y = 0;\n    }\n  });\n\n  if (showQuadtree) {\n    const quad = new Quadtree<Boid>(0, 0, width, height, boids);\n    quad.draw();\n  }\n\n  boids.forEach((p) => p.draw());\n};\n\nexport const draw = (): void => {\n  draw_(deltaTime);\n};\n\n// Expose the setup/draw functions to the global scope, because\n// the entire code will be wrapped in a large IIFE after bundling.\nObject.assign(window, { setup, draw, mouseClicked });\n"],
  "mappings": "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",
  "names": []
}
